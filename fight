#!/usr/bin/env php
<?php

require __DIR__ . '/bootstrap.php';

// Handle provided options
$defaults = array(
    'help'       => null,
    'iterations' => 10,
    'colors'     => true,
    'optimize'   => null,
    'list'       => null,
    'tower'      => null,
    'values'     => null,
);

$mapping = array(
    'h' => 'help',
    'i' => 'iterations',
    'c' => 'colors',
    'o' => 'optimize',
    'l' => 'list',
    't' => 'tower',
    'v' => 'values',
);

$options = getopt(
    'hi:coltv:',
    array(
        'help',
        'iterations:',
        'colors',
        'optimize',
        'list',
        'tower',
        'values:',
    )
);

// Merge options
foreach ( $mapping as $short => $long )
{
    if ( isset( $options[$short] ) &&
         !isset( $options[$long] ) )
    {
        $options[$long] = $options[$short];
        unset( $options[$short] );
    }
}
$options += $defaults;

// Show help output, if requested
if ( ( $options['help'] !== null ) ||
     ( count( $argv ) <= 1 ) )
{
    echo <<<EOHELP
Die Siedler Online fight simulator
by Kore Nordmann

Usage: {$argv[0]} [options] <army> <army>

General options:

-h / --help         Display this help output

-i / --iterations   Number of iterations in simulations.

-c / --colors       Enable output coloring

-o / --optimize     Use army set optimization

-v / --values       Use the unit value specifications from the given file to 
                    weigh lossen during optimization

-l / --list         List all unit abbreviations

Fight options:

-t / --tower        Enemy units are using a tower to defend themselves

The fight specification should look like "20R10B". For a list of available 
abbreviations use the --list option.

EOHELP;
    exit( 0 );
}

$armyFactory = new ArmyFactory( $options['values'] );

// Show list of abbreviations, if requested
if ( $options['list'] !== null )
{
    echo "Unit type abbreviations:\n\n";
    foreach ( $armyFactory->getAbbreviationList() as $abbreviation => $name )
    {
        printf( "% 5s %s\n",
            $abbreviation,
            $name
        );
    }

    exit( 0 );
}

$defender = $armyFactory->factory( array_pop( $argv ) );
$attacker = $armyFactory->factory( array_pop( $argv ), true );

if ( $options['optimize'] !== null )
{
    $fighter = new ObservedFightOptimizer(
        $options['tower'] !== null,
        new MultiFight(
            $options['tower'] !== null,
            $options['iterations']
        )
    );

    $fighter->registerObserver( new CliFightObserver() );
}
else
{
    $fighter = new MultiFight(
        $options['tower'] !== null,
        $options['iterations']
    );
}

$visitor = new ArmyCliVisitor( $options['colors'] !== null );
$visitor->visit(
    $fighter->fight( $attacker, $defender )
);

